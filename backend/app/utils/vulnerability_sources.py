import os
import requests
from typing import Optional

NVD_API_KEY = os.getenv("NVD_API_KEY")

def query_osv(name: str, ecosystem: str, version: Optional[str] = None):
    body = {
        "package": {
            "name": name,
            "ecosystem": ecosystem
        }
    }
    if version:
        body["version"] = version

    resp = requests.post("https://api.osv.dev/v1/query", json=body)
    resp.raise_for_status()
    data = resp.json()

    results = []
    for vuln in data.get("vulns", []):
        severity_list = vuln.get("severity", [])
        severity_str = ", ".join(f"{s.get('type', 'Unknown')}: {s.get('score', 'N/A')}" for s in severity_list) or "N/A"

        affected_versions = []
        for affected in vuln.get("affected", []):
            for r in affected.get("ranges", []):
                for ev in r.get("events", []):
                    introduced = ev.get("introduced")
                    fixed = ev.get("fixed")
                    affected_versions.append(introduced or fixed or "Unknown")

        results.append({
            "id": vuln.get("id"),
            "summary": vuln.get("summary"),
            "severity": severity_str,
            "affected": ", ".join(affected_versions) or "Unknown",
            "source": "OSV"
        })
    return results

def query_nvd(name: str):
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={name}"
    headers = {
        "apiKey": NVD_API_KEY
    }
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    data = resp.json()

    results = []
    for item in data.get("vulnerabilities", []):
        cve = item.get("cve", {})
        descriptions = cve.get("descriptions", [])
        summary = descriptions[0].get("value") if descriptions else "N/A"

        # Try CVSS v3.1 first, fallback to v3 or v2 if needed
        severity = "N/A"
        metrics = cve.get("metrics", {})
        for metric_key in ["cvssMetricV31", "cvssMetricV3", "cvssMetricV2"]:
            metric_list = metrics.get(metric_key, [])
            if metric_list:
                severity = metric_list[0].get("cvssData", {}).get("baseScore", "N/A")
                break

        results.append({
            "id": cve.get("id"),
            "summary": summary,
            "severity": severity,
            "affected": "Check configurations",
            "source": "NVD"
        })
    return results
