import os
import requests
from typing import Optional, List

NVD_API_KEY = os.getenv("NVD_API_KEY")

def query_osv(name: str, ecosystem: str, version: Optional[str] = None):
    body = {
        "package": {
            "name": name,
            "ecosystem": ecosystem
        }
    }
    if version:
        body["version"] = version

    resp = requests.post("https://api.osv.dev/v1/query", json=body)
    resp.raise_for_status()
    data = resp.json()

    results = []
    for vuln in data.get("vulns", []):
        severity_list = vuln.get("severity", [])
        severity_score = 0.0
        for item in severity_list:
            score = item.get("score")
            try:
                severity_score = max(severity_score, float(score))
            except (TypeError, ValueError):
                continue

        affected_versions = []
        for affected in vuln.get("affected", []):
            for r in affected.get("ranges", []):
                for ev in r.get("events", []):
                    introduced = ev.get("introduced")
                    fixed = ev.get("fixed")
                    affected_versions.append(introduced or fixed or "Unknown")

        references: List[str] = []
        for ref in vuln.get("references", []) or []:
            url = ref.get("url")
            if url:
                references.append(url)

        results.append({
            "id": vuln.get("id"),
            "summary": vuln.get("summary"),
            "severity_score": severity_score,
            "affected": ", ".join(affected_versions) or "Unknown",
            "source": "OSV",
            "references": references
        })
    return results

def query_nvd(name: str):
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={name}"
    headers = {
        "apiKey": NVD_API_KEY
    }
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    data = resp.json()

    results = []
    for item in data.get("vulnerabilities", []):
        cve = item.get("cve", {})
        descriptions = cve.get("descriptions", [])
        summary = descriptions[0].get("value") if descriptions else "N/A"

        severity_score = 0.0
        metrics = cve.get("metrics", {})
        for metric_key in ["cvssMetricV31", "cvssMetricV3", "cvssMetricV2"]:
            metric_list = metrics.get(metric_key, [])
            if metric_list:
                score = metric_list[0].get("cvssData", {}).get("baseScore")
                try:
                    severity_score = float(score)
                except (TypeError, ValueError):
                    severity_score = 0.0
                break

        references: List[str] = []
        refs = cve.get("references", {}).get("referenceData", [])
        for ref in refs or []:
            url = ref.get("url")
            if url:
                references.append(url)

        results.append({
            "id": cve.get("id"),
            "summary": summary,
            "severity_score": severity_score,
            "affected": "Check configurations",
            "source": "NVD",
            "references": references
        })
    return results
