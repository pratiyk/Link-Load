from fastapi import APIRouter
from pydantic import BaseModel
import os
import requests

router = APIRouter()

NVD_API_KEY = os.getenv("NVD_API_KEY")

class PackageInput(BaseModel):
    name: str
    ecosystem: str
    version: str | None = None

@router.post("/scan-vulnerabilities")  # No /api prefix here
def scan_vulnerabilities(input: PackageInput):
    results = []

    # OSV Query
    try:
        osv_body = {
            "package": {
                "name": input.name,
                "ecosystem": input.ecosystem
            }
        }
        if input.version:
            osv_body["version"] = input.version

        osv_resp = requests.post("https://api.osv.dev/v1/query", json=osv_body)
        osv_resp.raise_for_status()
        osv_data = osv_resp.json()
        for vuln in osv_data.get("vulns", []):
            results.append({
                "id": vuln.get("id"),
                "summary": vuln.get("summary"),
                "severity": ", ".join([f"{s['type']}: {s['score']}" for s in vuln.get("severity", [])]) or "N/A",
                "affected": ", ".join([
                    ev.get("introduced") or ev.get("fixed") or "Unknown"
                    for a in vuln.get("affected", [])
                    for r in a.get("ranges", [])
                    for ev in r.get("events", [])
                ]) or "Unknown",
                "source": "OSV"
            })
    except Exception as e:
        print("[ERROR] OSV scan failed:", str(e))

    # NVD Query
    try:
        nvd_url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={input.name}"
        headers = {"apiKey": NVD_API_KEY}
        nvd_resp = requests.get(nvd_url, headers=headers)
        nvd_resp.raise_for_status()
        nvd_data = nvd_resp.json()

        for item in nvd_data.get("vulnerabilities", []):
            cve = item.get("cve", {})
            results.append({
                "id": cve.get("id"),
                "summary": cve.get("descriptions", [{}])[0].get("value", "N/A"),
                "severity": next((
                    sev.get("score", "N/A")
                    for sev in cve.get("metrics", {}).get("cvssMetricV31", [{}])
                ), "N/A"),
                "affected": "Check configurations",
                "source": "NVD"
            })
    except Exception as e:
        print("[ERROR] NVD scan failed:", str(e))

    return {"results": results}
