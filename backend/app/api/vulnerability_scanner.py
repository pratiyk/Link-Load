from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from pydantic import BaseModel
from typing import List, Optional
from app.database import get_db
from app.services.scanners.basic_scanner import BasicVulnerabilityScanner
from app.services.intelligence_sources.nvd_source import NVDIntelligenceSource
from app.services.processors.vulnerability_processor import VulnerabilityProcessor
from app.core.security import get_current_user
import os
import logging

router = APIRouter()
logger = logging.getLogger(__name__)

NVD_API_KEY = os.getenv("NVD_API_KEY")

class ScanInput(BaseModel):
    target: str
    scan_type: str = "basic"
    options: dict = {}

class ScanResponse(BaseModel):
    scan_id: str
    message: str

@router.post("/scan", response_model=ScanResponse)
async def start_vulnerability_scan(
    input: ScanInput,
    db: Session = Depends(get_db),
    current_user = Depends(get_current_user)
):
    try:
        # Initialize scanner and intelligence sources
        scanner = BasicVulnerabilityScanner()
        nvd_source = NVDIntelligenceSource()
        processor = VulnerabilityProcessor(db, intel_sources=[nvd_source])

        # Start scan
        scan_id = await scanner.start_scan(input.target, input.options)
        
        # Process results
        raw_results = await scanner.get_scan_results(scan_id)
        normalized_results = await scanner.normalize_results(raw_results)
        
        # Process each finding
        for result in normalized_results:
            await processor.process_vulnerability(result, current_user.id)
        
        return {
            "scan_id": scan_id,
            "message": "Scan completed successfully"
        }
        
    except Exception as e:
        logger.error(f"Error during vulnerability scan: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Error during vulnerability scan: {str(e)}"
        )
