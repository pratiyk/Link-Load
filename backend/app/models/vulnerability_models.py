"""
Models for vulnerability management and security scanning.
"""

from sqlalchemy import (
    Column, Integer, String, DateTime, JSON, ForeignKey, 
    Float, Boolean, Table, Enum
)
from sqlalchemy.orm import relationship
from datetime import datetime
import enum
from typing import List, Optional
from pydantic import BaseModel, Field

from app.database import Base
from app.models.asset_models import DiscoveredAsset
from app.models.threat_intel_models import MITRETechnique
from app.models.associations import vulnerability_technique_association

class ScannerType(str, enum.Enum):
    """Types of supported security scanners"""
    ZAP = "zap"
    NUCLEI = "nuclei"
    WAPITI = "wapiti"
    CUSTOM = "custom"

class ScanStatus(str, enum.Enum):
    """Status of a security scan"""
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"
    TIMEOUT = "timeout"

class SeverityLevel(str, enum.Enum):
    """Standardized severity levels"""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class VulnerabilityStatus(str, enum.Enum):
    """Status of a vulnerability"""
    OPEN = "open"
    IN_PROGRESS = "in_progress"
    RESOLVED = "resolved"
    FIXED = "fixed"
    FALSE_POSITIVE = "false_positive"
    RISK_ACCEPTED = "risk_accepted"


class VulnerabilityData(Base):
    """Curated vulnerability record used across analytics and reporting"""

    __tablename__ = "vulnerabilities"

    id = Column(Integer, primary_key=True, index=True)
    source = Column(String, nullable=False)
    title = Column(String, nullable=False)
    description = Column(String)
    severity = Column(Float, nullable=False)
    cvss_score = Column(Float)
    cvss_vector = Column(String)
    cve_ids = Column(JSON)
    references = Column(JSON)
    status = Column(String, default=VulnerabilityStatus.OPEN.value)
    raw_data = Column(JSON)
    tags = Column(JSON)
    exploit_available = Column(Boolean, default=False)
    exploit_details = Column(JSON)
    business_impact = Column(String)
    attack_vector = Column(String)
    likelihood = Column(Float)
    impact_score = Column(Float)
    risk_score = Column(Float)
    created_by = Column(String)
    updated_by = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    first_seen = Column(DateTime, default=datetime.utcnow)
    last_seen = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    remediation_deadline = Column(DateTime)
    asset_id = Column(Integer, ForeignKey('discovered_assets.id'), nullable=False)

    # Relationships
    asset = relationship("DiscoveredAsset", back_populates="vulnerabilities")
    mitigations = relationship(
        "VulnerabilityMitigation",
        back_populates="vulnerability",
        cascade="all, delete-orphan"
    )
    intel_data = relationship(
        "ThreatIntelData",
        back_populates="vulnerability",
        cascade="all, delete-orphan"
    )
    threat_intel = relationship(
        "ThreatIntelligence",
        back_populates="vulnerability",
        cascade="all, delete-orphan"
    )
    mitre_techniques = relationship(
        "MITRETechnique",
        secondary=vulnerability_technique_association,
        back_populates="vulnerabilities"
    )
    risk_score = relationship(
        "RiskScore",
        back_populates="vulnerability",
        uselist=False
    )

    def to_dict(self) -> dict:
        """Serialize key vulnerability attributes for downstream analytics"""
        return {
            "id": self.id,
            "source": self.source,
            "title": self.title,
            "severity": self.severity,
            "cvss_score": self.cvss_score,
            "status": self.status,
            "risk_score": self.risk_score,
            "asset_id": self.asset_id,
            "created_at": self.created_at.isoformat() if self.created_at is not None else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at is not None else None,
        }

class SecurityScan(Base):
    """Record of a security scan"""
    __tablename__ = "security_scans"

    id = Column(String, primary_key=True)
    user_id = Column(String, nullable=False)
    target_url = Column(String, nullable=False)
    scan_types = Column(JSON)  # List of ScannerType
    status = Column(String, default=ScanStatus.PENDING)
    started_at = Column(DateTime, default=datetime.utcnow)
    completed_at = Column(DateTime)
    duration = Column(Integer)  # Duration in seconds
    
    # Scan configuration and results
    scan_config = Column(JSON)  # Scanner-specific configuration
    progress = Column(JSON)  # ScanProgress data
    summary = Column(JSON)  # ScanSummary data
    errors = Column(JSON)  # List of error messages
    environment_info = Column(JSON)  # Environment details during scan
    
    # Relations
    vulnerabilities = relationship("VulnerabilityFinding", back_populates="scan")

class VulnerabilityFinding(Base):
    """Vulnerability discovered during a security scan"""
    __tablename__ = "vulnerability_findings"

    id = Column(Integer, primary_key=True, index=True)
    scan_id = Column(String, ForeignKey('security_scans.id'))
    scanner = Column(String, nullable=False)  # Scanner that found this
    name = Column(String, nullable=False)
    description = Column(String)
    severity = Column(String, nullable=False)
    confidence = Column(String)

    # Location information
    url = Column(String)
    parameter = Column(String)
    method = Column(String)

    # Technical details
    solution = Column(String)
    references = Column(JSON)  # List of reference URLs
    evidence = Column(String)
    payload = Column(String)
    
    # Classification
    cwe_id = Column(String)
    owasp_category = Column(String)
    tags = Column(JSON)
    
    # Analysis
    attack_complexity = Column(String)
    attack_vector = Column(String)
    privileges_required = Column(String)
    user_interaction = Column(String)
    impact = Column(String)
    risk_score = Column(Float)
    
    # Status tracking
    status = Column(String, default=VulnerabilityStatus.OPEN)
    false_positive = Column(Boolean, default=False)
    discovered_at = Column(DateTime, default=datetime.utcnow)
    first_seen = Column(DateTime)
    last_seen = Column(DateTime)
    fixed_at = Column(DateTime)
    
    # Raw data and relations
    raw_finding = Column(JSON)
    scan = relationship("SecurityScan", back_populates="vulnerabilities")
    mitigations = relationship("VulnerabilityMitigation", back_populates="finding")
    intel_data = relationship("ThreatIntelData", back_populates="finding")

class VulnerabilityMitigation(Base):
    """Mitigation guidance for a vulnerability"""
    __tablename__ = "vulnerability_mitigations"

    id = Column(Integer, primary_key=True, index=True)
    finding_id = Column(Integer, ForeignKey('vulnerability_findings.id'), nullable=True)
    vulnerability_id = Column(Integer, ForeignKey('vulnerabilities.id'), nullable=True)
    recommendation = Column(String, nullable=False)
    priority = Column(Integer)  # 1-5 scale
    estimated_effort = Column(String)  # Low, Medium, High
    remediation_type = Column(String)  # Code fix, Config change, Patch, etc.
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # AI-generated fields
    code_snippets = Column(JSON)  # Example fix code snippets
    compliance_impact = Column(JSON)  # Affected compliance requirements
    business_impact = Column(String)
    
    # Relations
    finding = relationship("VulnerabilityFinding", back_populates="mitigations")
    vulnerability = relationship("VulnerabilityData", back_populates="mitigations")

class ThreatIntelData(Base):
    """Threat intelligence data linked to vulnerabilities"""
    __tablename__ = "threat_intel_data"

    id = Column(Integer, primary_key=True, index=True)
    finding_id = Column(Integer, ForeignKey('vulnerability_findings.id'), nullable=True)
    vulnerability_id = Column(Integer, ForeignKey('vulnerabilities.id'), nullable=True, index=True)
    source = Column(String, nullable=False)  # Intel feed source
    threat_type = Column(String)
    confidence_score = Column(Float)
    last_seen = Column(DateTime)
    exploit_available = Column(Boolean, default=False)
    exploit_details = Column(JSON)
    patch_available = Column(Boolean, default=False)
    patch_info = Column(JSON)
    raw_data = Column(JSON)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relations
    finding = relationship("VulnerabilityFinding", back_populates="intel_data")
    vulnerability = relationship("VulnerabilityData", back_populates="intel_data")