from sqlalchemy import (
    Column, Integer, String, DateTime, JSON, ForeignKey, 
    Float, Boolean, Table
)
from sqlalchemy.orm import relationship
from datetime import datetime
from app.database import Base
from app.models.asset_models import DiscoveredAsset
from app.models.threat_intel_models import MITRETechnique
from app.models.associations import vulnerability_technique_association

class VulnerabilityData(Base):
    __tablename__ = "vulnerability_data"

    id = Column(Integer, primary_key=True, index=True)
    source = Column(String, nullable=False)  # Scanner source (Nessus, Qualys, etc.)
    title = Column(String, nullable=False)
    description = Column(String)
    severity = Column(Float, nullable=False)
    cvss_score = Column(Float)
    cvss_vector = Column(String)
    cve_ids = Column(JSON)  # List of CVE IDs
    raw_data = Column(JSON)  # Store raw scanner output
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    asset_id = Column(Integer, ForeignKey('discovered_assets.id'))
    created_by = Column(String)  # User who created the vulnerability
    updated_by = Column(String)  # User who last updated the vulnerability

    # Intelligence-related fields
    attack_complexity = Column(String)
    attack_vector = Column(String)
    privileges_required = Column(String)
    user_interaction = Column(String)
    exploit_available = Column(Boolean, default=False)
    exploit_maturity = Column(String)
    patch_available = Column(Boolean, default=False)
    mitigation_steps = Column(JSON)
    risk_score = Column(Float)
    risk_factors = Column(JSON)
    
    # Relationships
    asset = relationship("DiscoveredAsset", back_populates="vulnerabilities")
    mitigations = relationship("VulnerabilityMitigation", back_populates="vulnerability")
    intel_data = relationship("ThreatIntelData", back_populates="vulnerability")
    mitre_techniques = relationship(
        "MITRETechnique",
        secondary="vulnerability_technique_association",
        back_populates="vulnerabilities"
    )

class VulnerabilityMitigation(Base):
    __tablename__ = "vulnerability_mitigations"

    id = Column(Integer, primary_key=True, index=True)
    vulnerability_id = Column(Integer, ForeignKey('vulnerability_data.id'))
    recommendation = Column(String, nullable=False)
    priority = Column(Integer)  # 1-5 scale
    estimated_effort = Column(String)  # Low, Medium, High
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    vulnerability = relationship("VulnerabilityData", back_populates="mitigations")

class ThreatIntelData(Base):
    __tablename__ = "threat_intel_data"

    id = Column(Integer, primary_key=True, index=True)
    vulnerability_id = Column(Integer, ForeignKey('vulnerability_data.id'))
    source = Column(String, nullable=False)  # Intel feed source
    threat_type = Column(String)
    confidence_score = Column(Float)
    last_seen = Column(DateTime)
    raw_data = Column(JSON)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    vulnerability = relationship("VulnerabilityData", back_populates="intel_data")