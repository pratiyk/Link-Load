name: Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  # === Build Production Images ===
  build:
    name: Build Production Images
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Backend
      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:buildcache,mode=max
      
      # Frontend
      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:buildcache,mode=max

  # === Deploy to Staging ===
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
      url: https://staging.linkload.example.com
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy backend to staging
        run: |
          echo "Deploying backend to staging..."
          echo "Image: ${{ needs.build.outputs.backend-image }}"
          # Add your deployment script here
      
      - name: Deploy frontend to staging
        run: |
          echo "Deploying frontend to staging..."
          echo "Image: ${{ needs.build.outputs.frontend-image }}"
          # Add your deployment script here
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add your smoke tests here
      
      - name: Notify deployment
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}'
            const message = `Staging deployment ${status}`
            console.log(message)

  # === Deploy to Production ===
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    environment:
      name: production
      url: https://linkload.example.com
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Create deployment
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              production_environment: true,
              auto_merge: false,
              required_contexts: []
            })
            console.log('Deployment ID:', deployment.data.id)
      
      - name: Deploy backend to production
        run: |
          echo "Deploying backend to production..."
          echo "Image: ${{ needs.build.outputs.backend-image }}"
          # Add your production deployment script here
      
      - name: Deploy frontend to production
        run: |
          echo "Deploying frontend to production..."
          echo "Image: ${{ needs.build.outputs.frontend-image }}"
          # Add your production deployment script here
      
      - name: Run production tests
        run: |
          echo "Running production validation..."
          # Add your production validation here
      
      - name: Database migrations (if needed)
        run: |
          echo "Running database migrations..."
          # Add your migration script here
      
      - name: Notify production deployment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://linkload.example.com'
            })
      
      - name: Notify deployment failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'failure'
            })

  # === Post-Deployment ===
  post-deployment:
    name: Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    
    steps:
      - name: Health check
        run: |
          curl -f https://linkload.example.com/health || exit 1
      
      - name: Verify API
        run: |
          curl -f https://linkload.example.com/api/v1/health || exit 1
      
      - name: Slack notification
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Deployment failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment Failed* - ${{ github.repository }}\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
