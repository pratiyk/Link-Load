// src/pages/VulnerabilityScanner.js
import React, { useState, useCallback, useMemo } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import SeverityBadge from "../components/SeverityBadge";

export default function VulnerabilityScanner() {
  const [name, setName] = useState("");
  const [ecosystem, setEcosystem] = useState("PyPI");
  const [version, setVersion] = useState("");
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const navigate = useNavigate();

  const handleSearch = useCallback(
    async (e) => {
      e.preventDefault();

      const trimmedName = name.trim();
      const trimmedEcosystem = ecosystem.trim();
      const trimmedVersion = version.trim();

      if (!trimmedName) {
        setError("Package name is required.");
        return;
      }

      setLoading(true);
      setError("");
      setResults([]);

      try {
        const res = await axios.post("http://localhost:8000/api/scan-vulnerabilities", {
          name: trimmedName,
          ecosystem: trimmedEcosystem,
          version: trimmedVersion || undefined,
        });

        const vulns = res.data?.results || [];
        if (vulns.length === 0) {
          setError("No vulnerabilities found for the given package.");
        } else {
          setResults(vulns);
        }
      } catch (err) {
        console.error(err);
        setError("Failed to fetch vulnerabilities from server.");
      } finally {
        setLoading(false);
      }
    },
    [name, ecosystem, version]
  );

  const handleRemediate = async () => {
    if (results.length === 0) return;

    const mappedVulns = results.map((vuln) => ({
      id: vuln.id || "N/A",
      package: vuln.package || vuln.id || "unknown-package",
      ecosystem: vuln.ecosystem || ecosystem || "PyPI",
      severity: vuln.severity !== undefined && vuln.severity !== null
        ? parseFloat(vuln.severity)
        : 0.0,
    }));

    try {
      const response = await axios.post(
        "http://localhost:8000/api/remediate",
        mappedVulns
      );

      navigate("/remediation", {
        state: { vulns: response.data },
      });
    } catch (err) {
      console.error("Failed to generate remediation plan:", err);
      alert("Failed to generate remediation plan.");
    }
  };

  // Calculate summary statistics
  const summary = useMemo(() => {
    const counts = {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
      unknown: 0,
      total: results.length
    };

    results.forEach(vuln => {
      const severity = vuln.severity;
      if (severity >= 9.0) counts.critical++;
      else if (severity >= 7.0) counts.high++;
      else if (severity >= 4.0) counts.medium++;
      else if (severity > 0) counts.low++;
      else counts.unknown++;
    });

    return counts;
  }, [results]);

  return (
    <div className="max-w-7xl mx-auto">
      <h2 className="section-title">Vulnerability Scanner</h2>

      <div className="card mb-6">
        <form
          onSubmit={handleSearch}
          className="grid gap-4 grid-cols-1 sm:grid-cols-3"
          noValidate
        >
          <input
            type="text"
            className="input-field"
            placeholder="Package name (e.g. flask, openssl)"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            disabled={loading}
          />

          <select
            className="input-field"
            value={ecosystem}
            onChange={(e) => setEcosystem(e.target.value)}
            disabled={loading}
          >
            <option value="PyPI">PyPI</option>
            <option value="npm">npm</option>
            <option value="Go">Go</option>
            <option value="Maven">Maven</option>
            <option value="RubyGems">RubyGems</option>
            <option value="crates.io">Rust (crates.io)</option>
          </select>

          <input
            type="text"
            className="input-field"
            placeholder="Version (optional)"
            value={version}
            onChange={(e) => setVersion(e.target.value)}
            disabled={loading}
          />

          <button
            className={`btn btn-primary sm:col-span-3 ${
              loading ? "opacity-60 cursor-not-allowed" : ""
            }`}
            type="submit"
            disabled={loading}
          >
            {loading ? "Scanning..." : "Scan for Vulnerabilities"}
          </button>
        </form>
      </div>

      {results.length > 0 && (
        <div className="mb-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
          <div className="card bg-red-50 border border-red-200">
            <h3 className="text-lg font-bold text-red-800">Critical</h3>
            <p className="text-3xl font-bold">{summary.critical}</p>
            <p className="text-sm text-red-700">Severity â‰¥ 9.0</p>
          </div>
          
          <div className="card bg-orange-50 border border-orange-200">
            <h3 className="text-lg font-bold text-orange-800">High</h3>
            <p className="text-3xl font-bold">{summary.high}</p>
            <p className="text-sm text-orange-700">7.0 - 8.9</p>
          </div>
          
          <div className="card bg-yellow-50 border border-yellow-200">
            <h3 className="text-lg font-bold text-yellow-800">Medium</h3>
            <p className="text-3xl font-bold">{summary.medium}</p>
            <p className="text-sm text-yellow-700">4.0 - 6.9</p>
          </div>
          
          <div className="card bg-green-50 border border-green-200">
            <h3 className="text-lg font-bold text-green-800">Low</h3>
            <p className="text-3xl font-bold">{summary.low}</p>
            <p className="text-sm text-green-700">0.1 - 3.9</p>
          </div>
          
          <div className="card bg-gray-50 border border-gray-200">
            <h3 className="text-lg font-bold text-gray-800">Total</h3>
            <p className="text-3xl font-bold">{summary.total}</p>
            <p className="text-sm text-gray-700">Vulnerabilities</p>
          </div>
        </div>
      )}

      {results.length > 0 && (
        <div className="flex justify-end mb-4">
          <button
            onClick={handleRemediate}
            className="btn btn-secondary"
          >
            Generate Remediation Plan
          </button>
        </div>
      )}

      {error && (
        <div className="card bg-yellow-50 border-l-4 border-yellow-500 p-4 mb-6">
          <p className="text-yellow-700">{error}</p>
        </div>
      )}

      {results.length > 0 ? (
        <div className="space-y-4">
          {results.map((vuln, index) => (
            <div key={index} className="card">
              <div className="flex justify-between items-start">
                <h3 className="font-semibold text-lg text-gray-800">{vuln.id || "N/A"}</h3>
                <SeverityBadge severity={vuln.severity} />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-3">
                <div>
                  <p className="text-sm text-gray-700 mb-1">
                    <span className="font-medium">Package:</span> {vuln.package || "N/A"}
                  </p>
                  <p className="text-sm text-gray-700 mb-1">
                    <span className="font-medium">Source:</span> {vuln.source || "N/A"}
                  </p>
                </div>
                <div>
                  <p className="text-sm text-gray-700 mb-1">
                    <span className="font-medium">Affected Versions:</span>{" "}
                    {vuln.affected || "Unknown"}
                  </p>
                  <p className="text-sm text-gray-700">
                    <span className="font-medium">Ecosystem:</span> {vuln.ecosystem || "N/A"}
                  </p>
                </div>
              </div>
              
              <div className="mt-3 pt-3 border-t border-gray-100">
                <p className="text-gray-700">
                  {vuln.summary || "No description available."}
                </p>
              </div>
            </div>
          ))}
        </div>
      ) : !loading && !error && (
        <div className="card text-center py-12">
          <div className="text-gray-400 mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
            </svg>
          </div>
          <p className="text-gray-600">Scan results will appear here</p>
        </div>
      )}
    </div>
  );
}