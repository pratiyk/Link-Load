import React, { useState, useCallback } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

export default function VulnerabilityScanner() {
  const [name, setName] = useState("");
  const [ecosystem, setEcosystem] = useState("PyPI");
  const [version, setVersion] = useState("");
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const navigate = useNavigate();

  const handleSearch = useCallback(
    async (e) => {
      e.preventDefault();

      const trimmedName = name.trim();
      const trimmedEcosystem = ecosystem.trim();
      const trimmedVersion = version.trim();

      if (!trimmedName) {
        setError("Package name is required.");
        return;
      }

      setLoading(true);
      setError("");
      setResults([]);

      try {
        const res = await axios.post("http://localhost:8000/api/scan-vulnerabilities", {
          name: trimmedName,
          ecosystem: trimmedEcosystem,
          version: trimmedVersion || undefined,
        });

        const vulns = res.data?.results || [];
        if (vulns.length === 0) {
          setError("No vulnerabilities found for the given package.");
        } else {
          setResults(vulns);
        }
      } catch (err) {
        console.error(err);
        setError("Failed to fetch vulnerabilities from server.");
      } finally {
        setLoading(false);
      }
    },
    [name, ecosystem, version]
  );

  const handleRemediate = async () => {
    if (results.length === 0) return;

    // Map vulnerabilities to the expected format for the remediation API
    const mappedVulns = results.map((vuln) => ({
      id: vuln.id || "N/A",
      package: vuln.package || vuln.id || "unknown-package",
      ecosystem: vuln.ecosystem || ecosystem || "PyPI",
      severity: vuln.severity !== undefined && vuln.severity !== null
        ? parseFloat(vuln.severity)
        : 0.0,
    }));

    try {
      const response = await axios.post(
        "http://localhost:8000/api/remediate",
        mappedVulns
      );

      navigate("/remediation", {
        state: { vulns: response.data },
      });
    } catch (err) {
      console.error("Failed to generate remediation plan:", err);
      alert("Failed to generate remediation plan.");
    }
  };

  return (
    <div className="p-6 max-w-3xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">Vulnerability Scanner</h2>

      <form
        onSubmit={handleSearch}
        className="grid gap-4 grid-cols-1 sm:grid-cols-3 mb-6"
        noValidate
      >
        <input
          type="text"
          className="border p-2 rounded"
          placeholder="Package name (e.g. flask, openssl)"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
          disabled={loading}
        />

        <select
          className="border p-2 rounded"
          value={ecosystem}
          onChange={(e) => setEcosystem(e.target.value)}
          disabled={loading}
        >
          <option value="PyPI">PyPI</option>
          <option value="npm">npm</option>
          <option value="Go">Go</option>
          <option value="Maven">Maven</option>
          <option value="RubyGems">RubyGems</option>
          <option value="crates.io">Rust (crates.io)</option>
        </select>

        <input
          type="text"
          className="border p-2 rounded"
          placeholder="Version (optional)"
          value={version}
          onChange={(e) => setVersion(e.target.value)}
          disabled={loading}
        />

        <button
          className={`bg-blue-600 text-white px-4 py-2 rounded sm:col-span-3 ${
            loading ? "opacity-60 cursor-not-allowed" : ""
          }`}
          type="submit"
          disabled={loading}
        >
          {loading ? "Scanning..." : "Scan for Vulnerabilities"}
        </button>
      </form>

      {/* Remediate button moved here â€” visible only if results exist */}
      {results.length > 0 && (
        <button
          onClick={handleRemediate}
          className="mb-4 bg-green-600 text-white px-4 py-2 rounded"
        >
          Remediate
        </button>
      )}

      {/* Results displayed below the Remediate button */}
      {results.length > 0 && (
        <div className="space-y-4">
          {results.map((vuln, index) => (
            <div key={index} className="bg-gray-100 p-4 rounded shadow">
              <h3 className="font-semibold">{vuln.id || "N/A"}</h3>
              <p className="text-sm text-gray-700 mb-1">
                <span className="font-medium">Source:</span> {vuln.source || "N/A"}
              </p>
              <p className="text-sm text-gray-700 mb-1">
                <span className="font-medium">Summary:</span> {vuln.summary || "N/A"}
              </p>
              <p className="text-sm">
                <span className="font-medium">Severity:</span> {vuln.severity || "N/A"}
              </p>
              <p className="text-sm">
                <span className="font-medium">Affected Versions:</span>{" "}
                {vuln.affected || "Unknown"}
              </p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
