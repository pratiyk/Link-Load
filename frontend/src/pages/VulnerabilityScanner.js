import React, { useState, useCallback, useMemo } from "react";
import apiClient, { API_ENDPOINTS } from "../config/api";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import {
  ShieldAlert,
  Package,
  ScanSearch,
  Bug,
  Shield,
  Wrench,
  AlertCircle,
  AlertTriangle,
  CheckCircle,
} from "lucide-react";

export default function VulnerabilityScanner() {
  const [name, setName] = useState("");
  const [ecosystem, setEcosystem] = useState("PyPI");
  const [version, setVersion] = useState("");
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const navigate = useNavigate();

  const handleSearch = useCallback(
    async (e) => {
      e.preventDefault();

      const trimmedName = name.trim();
      const trimmedEcosystem = ecosystem.trim();
      const trimmedVersion = version.trim();

      if (!trimmedName) {
        setError("Package name is required.");
        return;
      }

      setLoading(true);
      setError("");
      setResults([]);

      try {
        const res = await apiClient.post(API_ENDPOINTS.scans.packages.scan, {
          name: trimmedName,
          ecosystem: trimmedEcosystem,
          version: trimmedVersion || undefined,
        });

        const vulns = res.data?.results || [];
        if (vulns.length === 0) {
          setError("No vulnerabilities found for the given package.");
        } else {
          setResults(vulns);
        }
      } catch (err) {
        console.error(err);
        setError("Failed to fetch vulnerabilities from server.");
      } finally {
        setLoading(false);
      }
    },
    [name, ecosystem, version]
  );

  const handleRemediate = async () => {
    if (results.length === 0) return;

    const mappedVulns = results.map((vuln) => ({
      id: vuln.id || "N/A",
      package: vuln.package || vuln.id || "unknown-package",
      ecosystem: vuln.ecosystem || ecosystem || "PyPI",
      severity:
        vuln.severity !== undefined && vuln.severity !== null
          ? parseFloat(vuln.severity)
          : 0.0,
    }));

    try {
      const response = await apiClient.post(
        API_ENDPOINTS.remediation,
        mappedVulns
      );

      navigate("/remediation", {
        state: { vulns: response.data },
      });
    } catch (err) {
      console.error("Failed to generate remediation plan:", err);
      alert("Failed to generate remediation plan.");
    }
  };

  // Calculate summary statistics
  const summary = useMemo(() => {
    const counts = {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
      unknown: 0,
      total: results.length,
    };

    results.forEach((vuln) => {
      const severity = vuln.severity;
      if (severity >= 9.0) counts.critical++;
      else if (severity >= 7.0) counts.high++;
      else if (severity >= 4.0) counts.medium++;
      else if (severity > 0) counts.low++;
      else counts.unknown++;
    });

    return counts;
  }, [results]);

  return (
    <div className="max-w-6xl mx-auto px-4">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-12"
      >
        <div className="flex items-center gap-6 mb-6">
          <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-red-500 to-red-700 flex items-center justify-center shadow-lg shadow-red-500/20">
            <ShieldAlert size={32} className="text-white" strokeWidth={2} />
          </div>
          <div>
            <h1 className="text-4xl font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-400">
              Vulnerability Scanner
            </h1>
            <p className="text-gray-400 text-lg">
              Scan software packages for known security vulnerabilities
            </p>
          </div>
        </div>
      </motion.div>

      {/* Scan Form */}
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="bg-gray-800 bg-opacity-50 rounded-xl p-6 backdrop-blur-lg mb-8 border border-gray-700"
      >
        <form onSubmit={handleSearch} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2 flex items-center">
                <Package size={16} className="mr-2" />
                Package Name
              </label>
              <input
                type="text"
                className="w-full px-4 py-3 rounded-lg bg-gray-900 border border-gray-700 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                placeholder="e.g., flask, openssl"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
                disabled={loading}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2 flex items-center">
                <Shield size={16} className="mr-2" />
                Ecosystem
              </label>
              <select
                className="w-full px-4 py-3 rounded-lg bg-gray-900 border border-gray-700 text-white focus:outline-none focus:border-blue-500 transition-colors"
                value={ecosystem}
                onChange={(e) => setEcosystem(e.target.value)}
                disabled={loading}
              >
                <option value="PyPI">PyPI</option>
                <option value="npm">npm</option>
                <option value="Go">Go</option>
                <option value="Maven">Maven</option>
                <option value="RubyGems">RubyGems</option>
                <option value="crates.io">Rust (crates.io)</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-400 mb-2">
                Version (Optional)
              </label>
              <input
                type="text"
                className="w-full px-4 py-3 rounded-lg bg-gray-900 border border-gray-700 text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors"
                placeholder="e.g., 2.0.1"
                value={version}
                onChange={(e) => setVersion(e.target.value)}
                disabled={loading}
              />
            </div>
          </div>

          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className="w-full px-6 py-4 rounded-lg bg-gradient-to-r from-blue-500 to-purple-600 text-white font-medium flex items-center justify-center space-x-2 hover:opacity-90 transition-opacity disabled:opacity-50"
            type="submit"
            disabled={loading}
          >
            {loading ? (
              <>
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span>Scanning...</span>
              </>
            ) : (
              <>
                <ScanSearch size={20} strokeWidth={2} />
                <span>Scan for Vulnerabilities</span>
              </>
            )}
          </motion.button>
        </form>
      </motion.div>



      {/* Summary Cards */}
      {results.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6 mb-12"
        >
          <motion.div
            whileHover={{ scale: 1.02 }}
            className="p-6 rounded-xl bg-gradient-to-br from-red-500 to-red-700 text-white"
          >
            <div className="flex items-center gap-3 mb-4">
              <AlertCircle size={20} />
              <h3 className="text-lg font-semibold">Critical</h3>
            </div>
            <p className="text-4xl font-bold mb-2">{summary.critical}</p>
            <p className="text-sm text-red-200">Severity â‰¥ 9.0</p>
          </motion.div>

          <motion.div
            whileHover={{ scale: 1.02 }}
            className="p-6 rounded-xl bg-gradient-to-br from-orange-500 to-orange-700 text-white"
          >
            <div className="flex items-center gap-3 mb-4">
              <AlertTriangle size={20} />
              <h3 className="text-lg font-semibold">High</h3>
            </div>
            <p className="text-4xl font-bold mb-2">{summary.high}</p>
            <p className="text-sm text-orange-200">7.0 - 8.9</p>
          </motion.div>

          <motion.div
            whileHover={{ scale: 1.02 }}
            className="p-6 rounded-xl bg-gradient-to-br from-yellow-500 to-yellow-700 text-white"
          >
            <div className="flex items-center gap-3 mb-4">
              <Bug size={20} />
              <h3 className="text-lg font-semibold">Medium</h3>
            </div>
            <p className="text-4xl font-bold mb-2">{summary.medium}</p>
            <p className="text-sm text-yellow-200">4.0 - 6.9</p>
          </motion.div>

          <motion.div
            whileHover={{ scale: 1.02 }}
            className="p-6 rounded-xl bg-gradient-to-br from-green-500 to-green-700 text-white"
          >
            <div className="flex items-center gap-3 mb-4">
              <CheckCircle size={20} />
              <h3 className="text-lg font-semibold">Low</h3>
            </div>
            <p className="text-4xl font-bold mb-2">{summary.low}</p>
            <p className="text-sm text-green-200">0.1 - 3.9</p>
          </motion.div>

          <motion.div
            whileHover={{ scale: 1.02 }}
            className="p-6 rounded-xl bg-gradient-to-br from-blue-500 to-blue-700 text-white"
          >
            <div className="flex items-center gap-3 mb-4">
              <Package size={20} />
              <h3 className="text-lg font-semibold">Total</h3>
            </div>
            <p className="text-4xl font-bold mb-2">{summary.total}</p>
            <p className="text-sm text-blue-200">Vulnerabilities</p>
          </motion.div>
        </motion.div>
      )}

      {/* Remediation Button */}
      {results.length > 0 && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3 }}
          className="flex justify-end mb-8"
        >
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={handleRemediate}
            className="px-6 py-3 rounded-lg bg-purple-600 text-white font-medium flex items-center space-x-2 hover:bg-purple-700 transition-colors"
          >
            <Wrench size={18} />
            <span>Generate Remediation Plan</span>
          </motion.button>
        </motion.div>
      )}

      {/* Error State */}
      {error && !loading && (
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className={`p-6 rounded-xl flex items-start gap-4 mb-8 ${
            results.length === 0
              ? 'bg-green-900/20 border border-green-700/50'
              : 'bg-yellow-900/20 border border-yellow-700/50'
          }`}
        >
          {results.length === 0 ? (
            <>
              <CheckCircle className="text-green-400 flex-shrink-0 mt-1" size={24} />
              <div>
                <h3 className="text-green-400 font-semibold mb-1">
                  No Vulnerabilities Found
                </h3>
                <p className="text-green-300">{error}</p>
              </div>
            </>
          ) : (
            <>
              <AlertTriangle className="text-yellow-400 flex-shrink-0 mt-1" size={24} />
              <div>
                <h3 className="text-yellow-400 font-semibold mb-1">
                  Notice
                </h3>
                <p className="text-yellow-300">{error}</p>
              </div>
            </>
          )}
        </motion.div>
      )}

      {/* Loading State */}
      {loading && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-center py-16"
        >
          <div className="inline-flex items-center justify-center w-16 h-16 mb-8">
            <svg className="animate-spin w-12 h-12 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </div>
          <h3 className="text-xl font-semibold mb-2 text-white">Scanning Package...</h3>
          <p className="text-gray-400">
            Checking for known vulnerabilities in {ecosystem} package: {name}
          </p>
        </motion.div>
      )}

      {/* Results List */}
      {results.length > 0 ? (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
          className="space-y-6"
        >
          {results.map((vuln, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className="bg-gray-800 bg-opacity-50 rounded-xl p-6 backdrop-blur-lg border border-gray-700"
            >
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h3 className="text-xl font-semibold mb-1 text-white">
                    {vuln.id || "N/A"}
                  </h3>
                  <p className="text-gray-400">
                    {vuln.package || "N/A"}
                  </p>
                </div>
                <span className={`px-4 py-1 rounded-full text-sm font-medium ${
                  vuln.severity >= 9.0 ? 'bg-red-500/20 text-red-400' :
                  vuln.severity >= 7.0 ? 'bg-orange-500/20 text-orange-400' :
                  vuln.severity >= 4.0 ? 'bg-yellow-500/20 text-yellow-400' :
                  'bg-green-500/20 text-green-400'
                }`}>
                  {vuln.severity >= 9.0 ? 'Critical' :
                   vuln.severity >= 7.0 ? 'High' :
                   vuln.severity >= 4.0 ? 'Medium' : 'Low'}
                </span>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-900/50 rounded-lg mb-4">
                <div>
                  <p className="text-sm mb-2">
                    <span className="text-gray-400 font-medium">Source: </span>
                    <span className="text-white">{vuln.source || "N/A"}</span>
                  </p>
                  <p className="text-sm">
                    <span className="text-gray-400 font-medium">Ecosystem: </span>
                    <span className="text-white">{vuln.ecosystem || "N/A"}</span>
                  </p>
                </div>
                <div>
                  <p className="text-sm">
                    <span className="text-gray-400 font-medium">Affected Versions: </span>
                    <span className="text-white">{vuln.affected || "Unknown"}</span>
                  </p>
                </div>
              </div>

              <div className="pt-4 border-t border-gray-700">
                <p className="text-gray-300 text-sm leading-relaxed">
                  {vuln.summary || "No description available."}
                </p>
              </div>
            </motion.div>
          ))}
        </motion.div>
      ) : (
        !loading && !error && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-16"
          >
            <Package
              size={64}
              className="mx-auto mb-6 text-gray-600 opacity-50"
            />
            <p className="text-gray-400 text-lg">
              Scan results will appear here
            </p>
          </motion.div>
        )
      )}
    </div>
  );
}
