import React, { useState, useEffect, useCallback } from 'react';
import { 
  Shield, AlertTriangle, Crosshair, Radar, 
  Activity, CheckCircle, XCircle, Info 
} from 'lucide-react';
import apiClient, { WS_BASE_URL } from '../config/api';
import RiskScoreGauge from './RiskScoreGauge';
import MITREMatrix from './MITREMatrix';
import ThreatFeed from './ThreatFeed';
import VulnerabilityTimeline from './VulnerabilityTimeline';

const VulnerabilityIntelligence = ({ vulnerabilityId }) => {
  const [analysis, setAnalysis] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [ws, setWs] = useState(null);

  // WebSocket connection for real-time updates
  useEffect(() => {
    const token = localStorage.getItem('access_token');
    const wsUrl = `${WS_BASE_URL}/api/v1/intelligence/ws/analysis/${vulnerabilityId}?token=${token}`;
    const websocket = new WebSocket(wsUrl);

    websocket.onopen = () => {
      console.log('WebSocket connected');
      // Start ping interval
      const pingInterval = setInterval(() => {
        if (websocket.readyState === WebSocket.OPEN) {
          websocket.send('ping');
        }
      }, 25000);
      setWs({ socket: websocket, pingInterval });
    };

    websocket.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        if (data !== 'pong') {
          setAnalysis(data);
          setLoading(false);
        }
      } catch (error) {
        console.error('WebSocket message error:', error);
      }
    };

    websocket.onerror = (error) => {
      console.error('WebSocket error:', error);
      setError('Real-time connection failed');
    };

    websocket.onclose = () => {
      console.log('WebSocket closed');
    };

    return () => {
      if (ws?.pingInterval) clearInterval(ws.pingInterval);
      if (websocket.readyState === WebSocket.OPEN) {
        websocket.close();
      }
    };
  }, [vulnerabilityId]);

  // Initial data fetch
  useEffect(() => {
    const fetchAnalysis = async () => {
      try {
        setLoading(true);
        const response = await apiClient.get(
          `/api/v1/intelligence/analysis/${vulnerabilityId}`
        );
        setAnalysis(response.data);
      } catch (err) {
        setError(err.response?.data?.detail || 'Failed to fetch analysis');
      } finally {
        setLoading(false);
      }
    };

    fetchAnalysis();
  }, [vulnerabilityId]);

  const refreshAnalysis = useCallback(() => {
    if (ws?.socket?.readyState === WebSocket.OPEN) {
      ws.socket.send('refresh');
    }
  }, [ws]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border-l-4 border-red-500 p-4 my-4">
        <div className="flex">
          <div className="flex-shrink-0">
            <XCircle className="h-5 w-5 text-red-500" />
          </div>
          <div className="ml-3">
            <p className="text-sm text-red-700">{error}</p>
          </div>
        </div>
      </div>
    );
  }

  const {
    risk_analysis,
    mitre_mapping,
    threat_summary,
    recommendations
  } = analysis || {};

  return (
    <div className="space-y-6">
      {/* Risk Score Section */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold flex items-center">
            <Shield className="mr-2 text-primary" />
            Risk Analysis
          </h2>
          <button
            onClick={refreshAnalysis}
            className="btn btn-secondary btn-sm"
          >
            Refresh
          </button>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <RiskScoreGauge score={risk_analysis?.score || 0} />
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-gray-600">Base Score:</span>
              <span className="font-semibold">{risk_analysis?.base_score.toFixed(1)}</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-gray-600">Temporal Score:</span>
              <span className="font-semibold">{risk_analysis?.temporal_multiplier.toFixed(2)}x</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-gray-600">Environmental Score:</span>
              <span className="font-semibold">{risk_analysis?.environmental_multiplier.toFixed(2)}x</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-gray-600">ML Confidence:</span>
              <span className="font-semibold">{(risk_analysis?.confidence * 100).toFixed(0)}%</span>
            </div>
          </div>
        </div>
      </div>

      {/* MITRE ATT&CK Mapping */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <h2 className="text-xl font-semibold flex items-center mb-4">
          <Crosshair className="mr-2 text-primary" />
          MITRE ATT&CK Mapping
        </h2>
        <MITREMatrix mappings={mitre_mapping} />
      </div>

      {/* Threat Intelligence */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <h2 className="text-xl font-semibold flex items-center mb-4">
          <Radar className="mr-2 text-primary" />
          Threat Intelligence
        </h2>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-gray-600">Total Threats:</span>
              <span className="font-semibold">{threat_summary?.total_threats}</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-gray-600">Confidence:</span>
              <span className="font-semibold">
                {(threat_summary?.avg_confidence * 100).toFixed(0)}%
              </span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-gray-600">Recent Activity:</span>
              {threat_summary?.recent_activity ? (
                <span className="text-red-500 font-semibold flex items-center">
                  <Activity className="w-4 h-4 mr-1" />
                  Active
                </span>
              ) : (
                <span className="text-green-500 font-semibold flex items-center">
                  <CheckCircle className="w-4 h-4 mr-1" />
                  Inactive
                </span>
              )}
            </div>
          </div>
          <ThreatFeed threatTypes={threat_summary?.threat_types || []} />
        </div>
      </div>

      {/* Recommendations */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <h2 className="text-xl font-semibold flex items-center mb-4">
          <AlertTriangle className="mr-2 text-primary" />
          Security Recommendations
        </h2>
        <div className="space-y-4">
          {recommendations?.map((rec, index) => (
            <div
              key={index}
              className={`p-4 rounded-lg border ${
                rec.priority === 'high'
                  ? 'border-red-200 bg-red-50'
                  : rec.priority === 'medium'
                  ? 'border-yellow-200 bg-yellow-50'
                  : 'border-green-200 bg-green-50'
              }`}
            >
              <div className="flex items-start">
                <div
                  className={`rounded-full p-2 mr-3 ${
                    rec.priority === 'high'
                      ? 'bg-red-100'
                      : rec.priority === 'medium'
                      ? 'bg-yellow-100'
                      : 'bg-green-100'
                  }`}
                >
                  <Info className={`w-4 h-4 ${
                    rec.priority === 'high'
                      ? 'text-red-500'
                      : rec.priority === 'medium'
                      ? 'text-yellow-500'
                      : 'text-green-500'
                  }`} />
                </div>
                <div>
                  <h3 className="font-semibold mb-1">{rec.action}</h3>
                  <p className="text-sm text-gray-600">{rec.details}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Timeline */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <h2 className="text-xl font-semibold flex items-center mb-4">
          <Activity className="mr-2 text-primary" />
          Vulnerability Timeline
        </h2>
        <VulnerabilityTimeline
          events={[
            {
              date: new Date(),
              type: 'discovery',
              title: 'Vulnerability Discovered',
              description: 'Initial detection through security scan'
            },
            // Add more timeline events
          ]}
        />
      </div>
    </div>
  );
};

export default VulnerabilityIntelligence;