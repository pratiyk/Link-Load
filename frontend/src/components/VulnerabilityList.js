import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { format } from 'date-fns';
import { AlertTriangle, Shield } from 'lucide-react';
import '../styles/design-system.css';

const VulnerabilityList = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchVulnerabilities();
  }, []);

  const fetchVulnerabilities = async () => {
    try {
      const response = await axios.get('/api/v1/vulnerabilities');
      setVulnerabilities(response.data);
      setLoading(false);
    } catch (err) {
      setError('Failed to fetch vulnerabilities');
      setLoading(false);
    }
  };

  const getSeverityColor = (severity) => {
    if (severity >= 8) return 'bg-red-600';
    if (severity >= 6) return 'bg-orange-500';
    if (severity >= 4) return 'bg-yellow-500';
    return 'bg-blue-500';
  };

  if (loading) return <div className="p-4">Loading...</div>;
  if (error) return <div className="p-4 text-red-500">{error}</div>;

  return (
    <div className="container mx-auto p-4">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold">Vulnerabilities</h2>
        <div className="flex items-center space-x-2">
          <Shield className="w-5 h-5" />
          <span>{vulnerabilities.length} found</span>
        </div>
      </div>

      <div className="grid gap-4">
        {vulnerabilities.map((vuln) => (
          <div
            key={vuln.id}
            className="bg-white rounded-lg shadow-md p-4 border border-gray-200"
          >
            <div className="flex items-start justify-between">
              <div>
                <h3 className="text-lg font-semibold">{vuln.title}</h3>
                <p className="text-gray-600 mt-1">{vuln.description}</p>
              </div>
              <div className={`px-3 py-1 rounded-full text-white ${getSeverityColor(vuln.severity)}`}>
                {vuln.severity.toFixed(1)}
              </div>
            </div>

            <div className="mt-4 grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-500">Source:</span> {vuln.source}
              </div>
              {vuln.cvss_score && (
                <div>
                  <span className="text-gray-500">CVSS Score:</span> {vuln.cvss_score}
                </div>
              )}
              <div>
                <span className="text-gray-500">Created:</span>{' '}
                {format(new Date(vuln.created_at), 'PPp')}
              </div>
              <div>
                <span className="text-gray-500">Updated:</span>{' '}
                {format(new Date(vuln.updated_at), 'PPp')}
              </div>
            </div>

            {vuln.cvss_vector && (
              <div className="mt-2 text-sm">
                <span className="text-gray-500">CVSS Vector:</span> {vuln.cvss_vector}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default VulnerabilityList;